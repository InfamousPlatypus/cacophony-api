#!/usr/bin/env python3

import argparse
import os
import subprocess
import getpass

try:
    # unix specific
    import grp


    def current_user_in_group(group_name):
        try:
            current_user = getpass.getuser()
            return current_user in grp.getgrnam(group_name).gr_mem
        except KeyError:
            return False
except ImportError:
    # We're on windows, and can ignore this.
    def current_user_in_group(group_name):
        return True

IMAGE_NAME = "cacophony-api"
CONTAINER_NAME = "cacophony-api"

parser = argparse.ArgumentParser(
    description="Run cacophony API server inside a Docker container"
)
parser.add_argument(
    "--isolate",
    default=False,
    action="store_true",
    help="Use static files, won't restart server when code changes",
)
parser.add_argument(
    "--isolate-node-modules",
    dest="isolate_node_modules",
    default=False,
    action="store_true",
    help="Restart server when code changes but not when node_modules changes",
)
parser.add_argument(
    "--background",
    default=False,
    action="store_true",
    help="Run container in background & don't show container logs",
)
parser.add_argument(
    "--no-cache",
    dest="cache",
    default=True,
    action="store_false",
    help="Don't use previously cached Docker images; rebuild them all",
)
# Set to false if your current user is already in the docker user group
parser.add_argument(
    "--sudo",
    default=False,
    action="store_true",
    help="Run commands with sudo"
)
args = parser.parse_args()


# Run docker ps without sudo to check if it can be used without
def check_docker_can_run():
    return subprocess.call(
        ["docker", "ps"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        timeout=30,
    )

use_sudo = args.sudo
if not args.sudo:
    if not current_user_in_group("docker"):
        if check_docker_can_run() != 0:
            use_sudo = True

print("Running commands with sudo {}".format(use_sudo))


def add_sudo(cmd_list):
    if use_sudo:
        cmd_list.insert(0, "sudo")
    return cmd_list

if not (os.path.exists("node_modules") or args.isolate or args.isolate_node_modules):
    print("Node modules have not been installed yet, doing so now")
    subprocess.call(["npm", "install"])

print("Building containers")
build_container_cmd = ["docker-compose", "build"]
if not args.cache:
    subprocess.check_call(add_sudo(["docker-compose", "pull"]))
    build_container_cmd.append("--no-cache")
subprocess.check_call(add_sudo(build_container_cmd))

print("Starting containers")
run_cmd = ["docker-compose", "-f", "docker-compose.yml"]

if not args.isolate:
    run_cmd.extend(["-f", "docker-compose.live-dev.yml"])

if args.isolate_node_modules:
    run_cmd.extend(["-f", "docker-compose.isolate-node-modules.yml"])

run_cmd.extend(["up", "--force-recreate"])

if args.background:
    run_cmd.append("--detach")

subprocess.check_call(add_sudo(run_cmd))
